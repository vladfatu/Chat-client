/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Chat_Client.java
 *
 * Created on Apr 20, 2010, 12:09:26 AM
 */

package chat_client;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.Iterator;
import java.util.List;

import javax.swing.TransferHandler;
import java.io.*;
import java.net.*;
import javax.swing.JComponent;
//import java.util.*;
//import java.util.logging.Level;
//import java.util.logging.Logger;
/**
 *
 * @author Vlad
 */
public class Chat_Client extends javax.swing.JFrame {
public static Socket s;
public static String nume1="";
public static Chat_Client c;
//public static boolean autentified=false;
public static DataOutputStream stream;
    /** Creates new form Chat_Client */
    public Chat_Client(String nume) {
        initComponents();
        s=Meniu.s;
        this.setTitle(nume);
        nume1=nume;
        jTextField1.requestFocus();
    JComponent cp = (JComponent) getContentPane();
    cp.setTransferHandler(new MyFileTransferHandler()); // see below
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        send.setText("send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        send("");
    }//GEN-LAST:event_sendActionPerformed

    public void send(String mesaj)
    {
        try {
            stream = new DataOutputStream(s.getOutputStream());
        } catch (IOException ex) {
            System.out.println("Streamul nu poate fi creat");
        }
        try {
            if (mesaj.equals("")) stream.writeUTF("/msg "+nume1+" "+jTextField1.getText());
            else 
            {
                String fisier=mesaj;
                stream.writeUTF("/transfer "+nume1+" "+fisier);
                InputStream fis = null;
                try { fis = new FileInputStream(fisier); }
                catch (FileNotFoundException e) {
                  System.out.println("Fisier inexistent");
                }
                int p = fisier.lastIndexOf("\\");
                fisier = fisier.substring(p+1,fisier.length());
                int k;
                while( (k=fis.read()) != -1) stream.write(k);
                stream.write(0);
                fis.close(); System.out.println("Fisier transmis!");
                }
        } catch (IOException ex) {
            System.out.println("textul nu poate fi scris");
            return;
        }
        if (mesaj.equals("")) jTextArea1.setText(jTextArea1.getText()+"[eu]:"+jTextField1.getText()+"\n");
        if (jTextField1.getText().equals("/quit"))
        {
            Input.ok=false;
            try {
                s.close();
            } catch (IOException ex) {
               System.out.println("Socketul nu poate fi inchis");
               return;
            }
        }
        jTextField1.setText("");
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Meniu.c[Meniu.m.pozitie(this.getTitle())]=null;
        /*try {
            stream = new DataOutputStream(s.getOutputStream());
        } catch (IOException ex) {
            System.out.println("Streamul nu poate fi creat");
        }
        try {
            stream.writeUTF("/quit");
        } catch (IOException ex) {
            System.out.println("textul nu poate fi scris");
        }
        C.ok=false;
            try {
                s.close();
            } catch (IOException ex) {
               System.out.println("Socketul nu poate fi inchis");
            }*/
    }//GEN-LAST:event_formWindowClosing

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
       
    }//GEN-LAST:event_formKeyPressed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        int key = evt.getKeyCode();
        if (key == java.awt.event.KeyEvent.VK_ENTER)
            send("");
    }//GEN-LAST:event_jTextField1KeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                c=new Chat_Client("titlu");
                /*try {
                       s = new Socket("95.64.77.17", 1234);
                    }
                catch (IOException e) {
                    System.out.println("Nu ma pot conecta la server.");
                    c.dispose();
                    }
                Login l=new Login(s);
                l.setVisible(true);
                //c.setVisible(true);
                jTextField1.requestFocus();
        System.out.println("Porecla:");

        

        try {
            new Input(s);
        }
        catch (IOException e) {
            System.out.println("Eroare la input.");
            c.dispose();
        }*/
        /*try {
            new Output(s);
        }*
        catch (IOException e) {
            System.out.println("Eroare la output.");
            return;
        }*/
    }
        });
    }

    class MyFileTransferHandler extends TransferHandler {
  public boolean canImport(JComponent arg0, DataFlavor[] arg1) {
    for (int i = 0; i < arg1.length; i++) {
      DataFlavor flavor = arg1[i];
      if (flavor.equals(DataFlavor.javaFileListFlavor)) {
        //System.out.println("canImport: JavaFileList FLAVOR: " + flavor);
        return true;
      }
      if (flavor.equals(DataFlavor.stringFlavor)) {
        System.out.println("canImport: String FLAVOR: " + flavor);
        return true;
      }
      System.err.println("canImport: Rejected Flavor: " + flavor);
    }
    // Didn't find any that match, so:
    return false;
  }

  /**
   * Do the actual import.
   *
   * @see javax.swing.TransferHandler#importData(javax.swing.JComponent,
   *      java.awt.datatransfer.Transferable)
   */
  public boolean importData(JComponent comp, Transferable t) {
    DataFlavor[] flavors = t.getTransferDataFlavors();
    System.out.println("Trying to import:" + t);
    System.out.println("... which has " + flavors.length + " flavors.");
    for (int i = 0; i < flavors.length; i++) {
      DataFlavor flavor = flavors[i];
      try {
        if (flavor.equals(DataFlavor.javaFileListFlavor)) {
          System.out.println("importData: FileListFlavor");

          List l = (List) t
              .getTransferData(DataFlavor.javaFileListFlavor);
          Iterator iter = l.iterator();
          while (iter.hasNext()) {
            File file = (File) iter.next();
            System.out.println("GOT FILE: "
                + file.getCanonicalPath());
            //Input.fisier=file.getCanonicalPath();
            send(file.getCanonicalPath());
            // Now do something with the file...
          }
          return true;
        } else if (flavor.equals(DataFlavor.stringFlavor)) {
          System.out.println("importData: String Flavor");
          String fileOrURL = (String) t.getTransferData(flavor);
          System.out.println("GOT STRING: " + fileOrURL);
          try {
            URL url = new URL(fileOrURL);
            System.out.println("Valid URL: " + url.toString());
            // Do something with the contents...
            return true;
          } catch (MalformedURLException ex) {
            System.err.println("Not a valid URL");
            return false;
          }
          // now do something with the String.

        } else {
          System.out.println("importData rejected: " + flavor);
          // Don't return; try next flavor.
        }
      } catch (IOException ex) {
        System.err.println("IOError getting data: " + ex);
      } catch (UnsupportedFlavorException e) {
        System.err.println("Unsupported Flavor: " + e);
      }
    }
    // If you get here, I didn't like the flavor.
    Toolkit.getDefaultToolkit().beep();
    return false;
  }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextField jTextField1;
    private javax.swing.JButton send;
    // End of variables declaration//GEN-END:variables

}
